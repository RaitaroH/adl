#!/usr/bin/env bash

## Version:\033[0;35m 2.5.0 \033[0m
## Wrapper for anime-downloader. Allows using watchlist given by trackma for a better anime watching cli experience.
## Homepage:\033[0;34m https://github.com/RaitaroH/adl \033[0m
## Usage:\033[0;36m $adl [Option...] [Command...] \033[0m
## \033[1;33mOptions:\033[0m
##   -p, --player      Define player used for streaming. Ex: \033[0;36m$adl -p mpv\033[0m;
##   -s, --show        Watch custom show. Ep nr optional, careful with the quotes. Ex: \033[0;36m$adl -s "gegege 2018"\033[0m;
##   -n, --number      Specify episode number that will be used with '-s / --show' option. Ex: \033[0;36m$adl -s "gegege 2018" -n "4"\033[0m;
##   -y, --no-confirm  Assume default option for all promts, except watch another anime. Requires anime-downloader git/master;
##   -r, --retrieve    Run trackma retrieve to update local list;
##   -d, --download    Download instead of streaming;
##   -l, --local       Use local files instead of streaming. Define folder to be used for local as argument;
##   -f, --frece       Optionally adl can use frece to show most watched anime at the top of the list in fzf;
##   -a, --account     By default trackma will use account 1. Use '-a "2"' for example to change trackma account;
##   -u, --update      Update this script from github master;
##   -h, --help        Display help and exit;
##   -v, --version     Display version and exit.

DB_FILE="/home/$USER/.local/share/adl.db"
ENTRIES_FILE="/tmp/adl.txt"
FZF_FILE="/tmp/adl.fzf"
yes=""
show_title=""
show_episode=""
player="mpv"
account="1"
retrieve=""
download="0"
ctrlc="0"
# For local anime viewing define directory and change local to 1
local="0"
animedir=""

# An array of anime that end with a fullstop/period/dot
# required for trackma updating
declare -a exceptions=("Bakuman" "Araburu Kisetsu no Otome-domo yo" "Doukyonin wa Hiza" "Tokidoki" "Atama no Ue" "Kobato")

check_player() { #{{{
  # Exit if "$player" is not installed
  if ! [ -x "$(command -v $player)" ]; then
    echo "Error: '$player' is not installed." >&2
    print_options
    exit 1
  fi
  clear
} #}}}
check_frece() { #{{{
  if ! [ -x "$(command -v frece)" ]; then
    echo "Error: 'frece' is not installed." >&2
    print_options
    exit 1
  fi
  clear
} #}}}
trap_ctrlc()      { ctrlc=1 ;}
color_print()     { echo -e "\033[0;36m$* \033[0m" ;} #for normal output
color_prompt()    { echo -en "\033[0;34m$*\033[0m" ;} #for user input
print_help()      { echo -e "$(sed -n "s/##\ //p" "$0")" ;} # more compact than { grep "^##" "$0" | sed -e "s/^...//" ;}
print_options()   { print_help | tail -13 ;}
print_version()   { print_help | head -2  ;}
print_noconfirm() { color_print "\nDefault option chosen due to option '-y'.\n" ;}
watching_prompt() {
  [[ "$download" == "0" ]] && var="watching" || var="downloading"
  echo -e "\nNow $var \033[0;34m$1\033[0m, $2 \033[0;34m$3 \033[0m"
}
get_list()        { #{{{
  if [[ "$retrieve" == "1" ]]; then
    color_print "Running trackma retrieve for account $account..."
    trackma -a "$account" retrieve
    clear
  fi
  tlist=$(LINES=25 COLUMNS=130 trackma -a "$account" list | head -n -2 | tail -n +2)
} #}}}
process_list()    {
  perl -pe 's/\x1b\[[0-9;]*m//g ; s/^.+?[^\s]\s+(.[^\.]*)\.+\ +(\d+).[^\d]\ (\d+|\?)\s+(\d+).+$/\1|\2|\3|\4|/g'
}
# {{{
# Entry manipulation explination ...
# \x1b is removing color formating and everything untill the first letter it finds
# the rest is a regexp; the \n are references: \1=title | \2=current ep | \3=all ep | \4=score |
# }}}

select_function() { #{{{
  # Retrieve title and nr. Parse file only once
  if [[ -z "$1" ]]; then
    if [[ -z "$use_frece" ]]; then
      entry="$(echo "$tlist" | fzf --ansi --reverse -m --prompt 'Multi-select with tab/shift-tab: ')"
      entry="$(echo "$entry" | process_list)"
      present=""
    else
      check_frece
      entry="$(echo "$tlist" | process_list)"
      present=""

      echo "$entry" | cut -d'|' -f1 > "$ENTRIES_FILE"
      # Create database
      if [ ! -f "$DB_FILE" ]; then
          frece init "$DB_FILE" "$ENTRIES_FILE"
      else
          frece update "$DB_FILE" "$ENTRIES_FILE" --purge-old
      fi

      cp "$DB_FILE" "$FZF_FILE"
      readarray -t lines <<< "$(frece print "$DB_FILE")"
      for line in "${lines[@]}"; do
        chosen="$(echo "$tlist" | grep "$line" | sed 's/\//\\\//g; s/|/\\|/g; s/\&/\\&/g')"
        sed -i "/$line/{s/$line/$chosen/g}" "$FZF_FILE" # for every in copied database replace that line with the trackma -a "$account" style line
      done

      line_number=1
      [[ -e "$ENTRIES_FILE" ]] && rm "$ENTRIES_FILE" # cleanup this file
      choice="$(frece print "$FZF_FILE" | \
        while IFS= read -r line ; do
          [[ $line_number -lt 10 ]] && echo "$line" | sed -e "s/\(.\{9\}\)//; s/^/${line_number}\ \  /; s/^/|   /" || \
          echo "$line" | sed -e "s/\(.\{9\}\)//; s/^/${line_number}\  /; s/^/|   /"
          ((line_number++)); done | \
            fzf --ansi --reverse -m --prompt 'Multi-select with tab/shift-tab: ')"
      echo "$choice" | process_list | \
        while IFS= read -r line ; do
          echo "$line" >> "$ENTRIES_FILE" # reuse this file
          frece increment "$DB_FILE" "$(echo "$line" | cut -d'|' -f1)"
        done
    fi
  else
    entry="$1" #retrieved custom show from adl input
    present="0"
  fi

  if [[ -z "$use_frece" ]]; then
    readarray -t lines <<< "$entry"
    for line in "${lines[@]}"; do
      watch "$line" "$present"
      echo
    done
  else
    readarray -t lines <<< "$(cat "$ENTRIES_FILE")"
    [[ -z "${#lines[@]}" ]] && color_print "Nothing was selected. Exiting." && return 0
    for line in "${lines[@]}"; do
      chosen=$(echo "$entry" | grep "$line")
      watch "$chosen" "$present"
      echo
    done
  fi

} #}}}

animedl() { #{{{
  # initialise trap to call trap_ctrlc function when signal 2 (SIGINT) is received
  trap "trap_ctrlc" 2
  color_print "You can press Ctrl+C to cancel watching. That episode won't be counted."

  if [ "$local" == "0" ]; then
    #-c 0 used to mean nothing, so instead pass skip-download which will mean nothing
    [[ -z "$yes" ]] && choice="--skip-download" || choice="-c 1"

    # I can't seem to get anime dl to work unless I use a function like this
    player_arg="$1"
    down_arg() { [[ "$download" == "0" ]] && echo "--play $player_arg" || echo "" ;}

    if [[ "$4" != "" ]]; then
      { out=$(anime dl $(down_arg) "$2" --episodes "$3":"$4" "$choice" | tee >(cat - >&5)); } 5>&1
      return 1
    else
      if [[ "$3" != "" ]]; then
        { out=$(anime dl $(down_arg) "$2" --episodes "$3" "$choice" | tee >(cat - >&5)); } 5>&1
        return 1
      else
        { out=$(anime dl $(down_arg) "$2" "$choice" | tee >(cat - >&5)); } 5>&1
        return 1
      fi
    fi
  else
    # instead of streaming, play from local media
    # this obviously requires identical folder names to ones on anilist
    if [[ "$4" != "" ]]; then
      list=""; out="";
      # get all anime episodes in one variable, on new lines
      for i in $(seq "$3" "$4"); do
        list+="$(find "$animedir/$2/" -type f -name "*$i*" | sort | fzf -e)\n"
      done
      # for each line open mpv
      while IFS= read -r line; do
        if [ "$ctrlc" = 0 ]; then
          { out+=$($player "$line" | tee >(cat - >&5)); } 5>&1
        else return 1; fi
      done <<< $(echo -e $list)
      return 1
    else
      if [[ "$3" != "" ]]; then
        { out=$($1 "$(find "$animedir/$2/" -type f -name "*$3*" | sort | fzf -e)" | tee >(cat - >&5)); } 5>&1
        return 1
      else
        { out=$($1 "$(find "$animedir/$2/" -type f | sort | fzf -e)" | tee >(cat - >&5)); } 5>&1
        return 1
      fi
    fi
  fi
} #}}}

watch() { #{{{
  title="$(echo "$1" | cut -d'|' -f1)"
  nr="$(($(echo "$1" | cut -d'|' -f2) + 1))" #dat spacing tho
   last="$(echo "$1" | cut -d'|' -f3)"
  score="$(echo "$1" | cut -d'|' -f4)"
  [[ "$last" == "?" ]] && last=$((nr + 12))

  [[ -z "$title" ]] && color_print "Nothing was selected. Exiting." && return 1

  # test if an anime title has a period at the end or not. If yes add one
  for t in $exceptions; do [ "$title" == "$t" ] && title="${title}."; done

  echo "$title > $((nr-1)) / $last"

  if [ -z "$show_episode" ]; then # if -n was used skip this, -r will be chosen
    color_print "Enter lowercase or uppercase to issue command:
      N - Next episode (default, press <ENTER>)
      L - from current to Last known
      A - All available, from episode 1
      I - custom Interval (range) of episodes
      P - Plus n episodes relative to last seen
      R - Rewatch/redownload current episode in list
      C - Custom episode
      U - Update entry chosen instead of streaming
      S - Skip. Choose another show."
    color_prompt "Your choice? [N/l/a/i/p/r/c/u/s]: "
    if [[ -z "$yes" ]]; then read -r ans_episode
    else ans_episode="" ; print_noconfirm
    fi
  else ans_episode="r"
  fi
  no_update=0
  case $ans_episode in
    ""|"n"|"N")
      watching_prompt "$title" "episode" "#$nr"
      animedl "$player" "$title" "$nr" ;;
    "l"|"L")
      if [[ "$last" != "?" ]]; then
        watching_prompt "$title" "starting with episode" "#$nr"
        animedl "$player" "$title" "$nr" "$last"
      else
        color_print "The last episode number is unknown."
        color_prompt "How many episodes after currnet you want to watch? : "
        if [[ -z "$yes" ]]; then read -r ans_nr
        else ans_nr="" ; print_noconfirm
        fi
        [[ $ans_nr != "" ]] && last=$((nr + ans_nr)) || last=$((nr + 5))
        watching_prompt "$title" "episodes" "#$nr to #$last"
        animedl "$player" "$title" "$nr" "$last"
      fi ;;
    "a"|"A")
      watching_prompt "$title" "starting with episode" "#1"
      animedl "$player" "$title" ;;
    "i"|"I")
      color_prompt "Starting episode of episodes range: "
      read -r interval_start
      color_prompt "Last episode of episodes range: "
      read -r interval_stop
      watching_prompt "$title" "episodes" "#$interval_start to #$interval_stop"
      animedl "$player" "$title" "$interval_start" "$interval_stop" ;;
    "p"|"P")
      color_prompt "How many episodes to watch: "
      read -r plus_start
      watching_prompt "$title" "episodes" "#$nr to #$((plus_start + nr - 1))"
      animedl "$player" "$title" "$nr" "$((plus_start + nr - 1))" ;;
    "r"|"R")
      no_update=1
      nr=$((nr - 1))
      watching_prompt "$title" "episode" "#$nr"
      animedl "$player" "$title" "$nr" ;;
    "c"|"C")
      no_update=1
      color_prompt "Enter custom number: "
      read -r nr
      watching_prompt "$title" "episode" "#$nr"
      animedl "$player" "$title" "$nr" ;;
    "u"|"U")
      color_print "\nSkipping watching episodes. Modifing entry."
      color_prompt "Update episode number or update score [E/s]: "

      read -r ans_modify
      case $ans_modify in
        ""|"e"|"E")
          color_print "Current episode for $title is $((nr - 1))."
          color_prompt "Enter updated episode number: "
          read -r custom
          [[ $custom != "" ]] && trackma -a "$account" update "$title" "$custom" || color_print "Skipping updating..." ;;
        "s"|"S")
          color_print "Current score for $title is $score."
          color_prompt "Enter udated score: "
          read -r custom
          [[ $custom != "" ]] && trackma -a "$account" score "$title" "$custom" || color_print "Skipping scoring..." ;;
      esac
      if [[ $custom != "" ]];  then
        trackma -a "$account" send
        sent="1"
      fi
      return 0 ;;
    "s"|"S")
      color_print "Skipping current entry."
      return 0 ;;
    *)
      color_print "Option not available."
      return 0 ;;
  esac

  # Initialize watched counter
  case $player in
    "vlc")
      watched=$(echo "$out" | grep -c 'Command Line Interface initialized') ;;
    "mpv")
      watched=$(echo "$out" | grep -c 'Exiting') ;;
    *)
      watched=1 ;;
  esac
  [[ "$ctrlc"   == "1" ]] && watched=$((watched - 1)) # if Ctrl-C was caught one extra episode was counted
  if [[ "$watched" == "0" && "$ctrlc" == "0" && "$download" == "0" ]]; then
    color_print "\n$player didn't start, the anime wasn't found, or the episode wasn't found..."
    return 0
  fi

  if [[ -z "$2" && "$download" == "0" ]]; then #only ask if anime is in list, only if streaming
    color_prompt "\n\nIncrease nr in anime list? Yes, no, or custom number [Y/n/c]: "
    if [[ -z "$yes" ]]; then read -r ans_update
    else ans_update="" ; print_noconfirm
  fi

    # test if an anime title has a period at the end or not. If yes add one
    for t in $exceptions; do [ "$title" == "$t" ] && title="${title}."; done

    case $ans_update in
      ""|"y"|"Y")
        [[ $no_update == 1 ]] && color_print "No need to update..." && return 0 #exit if option r/R was used before
        [[ $watched -gt 1  ]] && color_print "\nadl counted $watched episodes that have been watched." && nr=$((watched + nr - 1))
        if [[ $last == "?" ]]; then
           trackma -a "$account" update "$title" "$nr"
        else
          [[ $nr -le $last ]] && trackma -a "$account" update "$title" "$nr" || trackma -a "$account" update "$title" "$last"
        fi
        if [[ $score == 0 ]] && [[ $nr -ge $last ]] ; then
          color_prompt "\nAnime will be set to completed. Also rate the anime? Type score: "
          read -r ans_score
          [[ $ans_score != "" ]] && trackma -a "$account" score "$title" "$ans_score" || color_print "Skipping scoring..."
        fi
        trackma -a "$account" send
        sent="1"
        return 0 ;;
      "n"|"N")
        sent=""
        color_print "Skipping..."
        return 0 ;;
      "c"|"C")
        color_print "Enter custom number:"
        read -r custom
        trackma -a "$account" update "$title" "$custom"
        trackma -a "$account" send
        sent="1"
        return 0 ;;
      *)
        color_print "Option not available."
        return 0 ;;
    esac
  fi
} #end of watch() }}}

show_function() { #{{{
  if echo "$tlist" | grep -q "$1" ;then
    color_print "Anime found in list. Proceeding.\n"
    select_function "$(echo "$tlist" | grep "$1" | process_list)"
  else
    color_prompt "Anime not found in list. Want to add it? [y/N]: "
    if [[ -z "$yes" ]]; then read -r ans_add
    else ans_add="" ; print_noconfirm
    fi
    echo
    case $ans_add in
      "y"|"Y")
        trackma -a "$account" add "$1"
        trackma -a "$account" send
        color_print "\nRetrieving updated anime list...\n"
        get_list
        select_function ;; #anime is in list
      ""|"n"|"N")
        if [[ -n $2 ]]; then
          select_function "$1|$2|12|0" #episode nr was specified
        else
          color_print "Episode nr not specified. adl will proceed with a few guesses. \
          \nNext time add the anime to list or run: \"\$adl -s 'TITLE' -n 'EPISODE'\" \
          \nEpisode nr can still be specified later using 'Custom' option.\n"
          select_function "$1|$2|12|0" #episode nr was specified
        fi ;;
    esac
  fi
} #}}}

watch_another() { #{{{
  while true; do #run as many episodes as possible one after another
    if [[ -z "$yes" ]]; then
      [[ "$download" == "0" ]] && var="watch" || var="download"
      color_prompt "\nWant to $var another anime? [Y/n]: "
      read -r ans_another
    else ans_another="n"
    fi
    echo
    case $ans_another in
      ""|"y"|"Y")
        ctrlc=0 #making sure this counter is reset
        show_title=""
        show_episode=""
        [[ -z "$sent" ]] || color_print "\nRetrieving updated anime list...\n" && get_list
        select_function ;;
      "n"|"N")
        color_print "Exiting.\n"
        exit 0 ;;
    esac
  done
} #}}}

updater() { #{{{
  DIR=$(cd "$(dirname "$0")" || exit ; pwd)
  FILE=$(basename "$0")
  MESSAGE="WARNING: $0 will now overwrite itself at the path: $DIR/$FILE. Proceed? [y/N]: "
  printf "\033[0;31m%s\033[0m" "$MESSAGE" #red warning
  # integration with -y option crossed my mind but it is unwise
  read -r updater_ans
  case $updater_ans in
    "y"|"Y")
      color_prompt "\nadl can be updated from master or develop. Which one do you choose? [M/d]: "
      read -r source_ans
      case $source_ans in
        ""|"M"|"m")
          source="master"
          wget -q --show-progress "https://raw.githubusercontent.com/RaitaroH/adl/master/adl" -O "$DIR/$FILE" ;;
        "d"|"D")
          source="develop"
          wget -q --show-progress "https://raw.githubusercontent.com/RaitaroH/adl/develop/adl" -O "$DIR/$FILE" ;;
        *)
          color_print "Not an actual option. Exiting..."
          exit 1 ;;
      esac
      color_print "\n✓ Update from $source is complete." ;;
    ""|"n"|"N")
      color_print "Update aborted." ;;
    *)
      color_print "Not an actual option. Exiting..."
      exit 1 ;;
  esac
} #}}}

arguments() { #{{{
  # check if option is interpreted as argument for previous option; match getopt error format
  # \ in printf because $2 was expanded into an argument for printf
  if printf "%s" "$2" | grep -q "-"; then echo "$0: option requires an argument -- '$1'"; print_options; exit 1
  else eval "$3='$(xargs <<< "$2")'"
  fi
} #}}}

if ! params="$(getopt -o vhup:s:n:a:yrdl:f \
                      -l version,help,update,player:,show:,number:,account:,no-confirm,retrieve,download,local:,frece \
                      --name "$0" -- "$@")"; then print_options; exit 1; fi
eval set -- "$params"

while true; do
  opt="$1"
  case "$opt" in
    -v|--version)    print_version  ;  exit 0 ;;
    -h|--help)       print_help     ;  exit 0 ;;
    -u|--update)     updater        ;  exit 0 ;;
    -p|--player)     arguments "$opt" "$2" player ;;
    -s|--show)       arguments "$opt" "$2" show_title ;;
    -n|--number)     arguments "$opt" "$2" show_episode ;;
    -a|--account)    arguments "$opt" "$2" account ;;
    -y|--no-confirm) yes="1"       ;; # Assume default; vlc breaks if 1 is piped into anime-dl
    -r|--retrieve)   retrieve="1"  ;; # Run trackma retrieve
    -d|--download)   download="1"  ;; # Download instead of streaming
    -l|--local)      arguments "$opt" "$2" animedir; local=1 ;; # Use local media instead of streaming
    -f|--frece)      use_frece="1" ;;
    --) shift; break ;; # exit loop
  esac
  shift
done

check_player
get_list
[[ -z "$show_title" ]] && select_function || show_function "$show_title" "$show_episode"
watch_another

# Cleanup
[[ -e "$ENTRIES_FILE" ]] && rm "$ENTRIES_FILE" # cleanup this file
[[ -e "$FZF_FILE" ]] && rm "$FZF_FILE" # cleanup this file
